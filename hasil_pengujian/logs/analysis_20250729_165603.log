[H[J[3J[1;37m
╔══════════════════════════════════════════════════════════════════════════════╗
║                  🚀 ENHANCED SCALED BENCHMARK ANALYSIS 🚀                   ║
║                        PostgreSQL vs HBase Performance                      ║
╚══════════════════════════════════════════════════════════════════════════════╝
[0m
[0;34mℹ️  Analysis Started: 2025-07-29 16:56:03 UTC[0m
[0;34mℹ️  Analyzing User: BramMahendrawan[0m
[0;34mℹ️  System: Linux 6.8.0-64-generic[0m
[0;32m✅ Results file loaded: 32K (294 records)[0m

[0;35m📊 RAW BENCHMARK RESULTS[0m
══════════════════════════════════════════════════════════════════════════════
./analyze_results_scaled.sh: line 59: column: command not found

[0;35m📊 COMPREHENSIVE PERFORMANCE ANALYSIS[0m
══════════════════════════════════════════════════════════════════════════════
[1;37m🎯 MULTI-SCALE BENCHMARK ANALYSIS REPORT[0m
[1;37m================================================================[0m

[0;36m📊 BENCHMARK OVERVIEW[0m
[0;36m══════════════════════════════════════════════════════════════════════════════[0m
🔢 Total Tests Executed: 294
🏢 Databases Tested: PostgreSQL, HBase
📈 Scales Tested: 6 different scales
🎯 Phases Analyzed: 5 testing phases
⚡ Fastest Operation: postgresql_count_all_100 (52.00 ms)
🐌 Slowest Operation: hbase_data_generation_optimized_10000000 (45019658.00 ms)

[0;35m🎯 SCALE-BY-SCALE PERFORMANCE COMPARISON[0m
[0;35m══════════════════════════════════════════════════════════════════════════════[0m

[0;34m📊 SCALE: 100 RECORDS[0m
[0;34m────────────────────────────────────────────────────────────────────────────────[0m
Operation                      | PostgreSQL   | HBase      | Winner       | Advantage  | Performance Gap
────────────────────────────── | ──────────── | ────────── | ──────────── | ────────── | ────────────────
data                           |      344 ms |    449 ms | 🏆 PostgreSQL | 1.3x faster | 23.4% better
count                          |       53 ms |   6000 ms | 🏆 PostgreSQL | 113.2x faster | 99.1% better
crud                           |      529 ms |   6414 ms | 🏆 PostgreSQL | 12.1x faster | 91.8% better
bulk                           |       53 ms |  12217 ms | 🏆 PostgreSQL | 230.5x faster | 99.6% better
bulk                           |       52 ms |   6148 ms | 🏆 PostgreSQL | 118.2x faster | 99.2% better

[0;32m🏆 Scale 100 Summary:[0m
   PostgreSQL wins: 5 🏆 | HBase wins: 0 🏆 | Ties: 0 🤝
   [0;32m✨ Overall scale winner: PostgreSQL[0m

[0;34m📊 SCALE: 1000 RECORDS[0m
[0;34m────────────────────────────────────────────────────────────────────────────────[0m
Operation                      | PostgreSQL   | HBase      | Winner       | Advantage  | Performance Gap
────────────────────────────── | ──────────── | ────────── | ──────────── | ────────── | ────────────────
data                           |     3369 ms |   4472 ms | 🏆 PostgreSQL | 1.3x faster | 24.7% better
count                          |       54 ms |   6207 ms | 🏆 PostgreSQL | 114.9x faster | 99.1% better
crud                           |      529 ms |   6449 ms | 🏆 PostgreSQL | 12.2x faster | 91.8% better
bulk                           |       55 ms |  12588 ms | 🏆 PostgreSQL | 228.9x faster | 99.6% better
bulk                           |       53 ms |   6336 ms | 🏆 PostgreSQL | 119.5x faster | 99.2% better

[0;32m🏆 Scale 1000 Summary:[0m
   PostgreSQL wins: 5 🏆 | HBase wins: 0 🏆 | Ties: 0 🤝
   [0;32m✨ Overall scale winner: PostgreSQL[0m

[0;34m📊 SCALE: 10000 RECORDS[0m
[0;34m────────────────────────────────────────────────────────────────────────────────[0m
Operation                      | PostgreSQL   | HBase      | Winner       | Advantage  | Performance Gap
────────────────────────────── | ──────────── | ────────── | ──────────── | ────────── | ────────────────
data                           |    34049 ms |  45107 ms | 🏆 PostgreSQL | 1.3x faster | 24.5% better
count                          |       54 ms |   6802 ms | 🏆 PostgreSQL | 126.0x faster | 99.2% better
crud                           |      531 ms |   6382 ms | 🏆 PostgreSQL | 12.0x faster | 91.7% better
bulk                           |       57 ms |  13129 ms | 🏆 PostgreSQL | 230.3x faster | 99.6% better
bulk                           |       55 ms |   6580 ms | 🏆 PostgreSQL | 119.6x faster | 99.2% better

[0;32m🏆 Scale 10000 Summary:[0m
   PostgreSQL wins: 5 🏆 | HBase wins: 0 🏆 | Ties: 0 🤝
   [0;32m✨ Overall scale winner: PostgreSQL[0m

[0;34m📊 SCALE: 100000 RECORDS[0m
[0;34m────────────────────────────────────────────────────────────────────────────────[0m
Operation                      | PostgreSQL   | HBase      | Winner       | Advantage  | Performance Gap
────────────────────────────── | ──────────── | ────────── | ──────────── | ────────── | ────────────────
data                           |   340202 ms | 447511 ms | 🏆 PostgreSQL | 1.3x faster | 24.0% better
count                          |       72 ms |  10036 ms | 🏆 PostgreSQL | 139.4x faster | 99.3% better
crud                           |      534 ms |   6407 ms | 🏆 PostgreSQL | 12.0x faster | 91.7% better
bulk                           |       70 ms |   6908 ms | 🏆 PostgreSQL | 98.7x faster | 99.0% better
bulk                           |       76 ms |  13872 ms | 🏆 PostgreSQL | 182.5x faster | 99.5% better

[0;32m🏆 Scale 100000 Summary:[0m
   PostgreSQL wins: 5 🏆 | HBase wins: 0 🏆 | Ties: 0 🤝
   [0;32m✨ Overall scale winner: PostgreSQL[0m

[0;34m📊 SCALE: 1000000 RECORDS[0m
[0;34m────────────────────────────────────────────────────────────────────────────────[0m
Operation                      | PostgreSQL   | HBase      | Winner       | Advantage  | Performance Gap
────────────────────────────── | ──────────── | ────────── | ──────────── | ────────── | ────────────────
data                           |  3421480 ms | 4544649 ms | 🏆 PostgreSQL | 1.3x faster | 24.7% better
crud                           |      553 ms |   6447 ms | 🏆 PostgreSQL | 11.7x faster | 91.4% better
bulk                           |      325 ms |  16052 ms | 🏆 PostgreSQL | 49.4x faster | 98.0% better
bulk                           |      296 ms |   7612 ms | 🏆 PostgreSQL | 25.7x faster | 96.1% better

[0;32m🏆 Scale 1000000 Summary:[0m
   PostgreSQL wins: 4 🏆 | HBase wins: 0 🏆 | Ties: 0 🤝
   [0;32m✨ Overall scale winner: PostgreSQL[0m

[0;34m📊 SCALE: 10000000 RECORDS[0m
[0;34m────────────────────────────────────────────────────────────────────────────────[0m
Operation                      | PostgreSQL   | HBase      | Winner       | Advantage  | Performance Gap
────────────────────────────── | ──────────── | ────────── | ──────────── | ────────── | ────────────────
data                           | 34073587 ms | 45019658 ms | 🏆 PostgreSQL | 1.3x faster | 24.3% better
crud                           |     1080 ms |   6493 ms | 🏆 PostgreSQL | 6.0x faster | 83.4% better
bulk                           |     2642 ms |  17877 ms | 🏆 PostgreSQL | 6.8x faster | 85.2% better
bulk                           |     2498 ms |  10378 ms | 🏆 PostgreSQL | 4.2x faster | 75.9% better

[0;32m🏆 Scale 10000000 Summary:[0m
   PostgreSQL wins: 4 🏆 | HBase wins: 0 🏆 | Ties: 0 🤝
   [0;32m✨ Overall scale winner: PostgreSQL[0m

[0;35m📈 ADVANCED PERFORMANCE ANALYTICS[0m
[0;35m══════════════════════════════════════════════════════════════════════════════[0m

[0;36m🚀 THROUGHPUT ANALYSIS (Operations per Second)[0m
[0;36m────────────────────────────────────────────────────────────────────────────────[0m
Scale        | Operation                 | PostgreSQL      | HBase        | Winner       | Performance Ratio
──────────── | ───────────────────────── | ─────────────── | ──────────── | ──────────── | ────────────────
100          | 2_count                   |        1886 ops/s |       16 ops/s | 🏆 PostgreSQL | 117.88x
100          | 1_data                    |         290 ops/s |      222 ops/s | 🏆 PostgreSQL | 1.31x
100          | 3_crud                    |          18 ops/s |        1 ops/s | 🏆 PostgreSQL | 18.00x
100          | 5_bulk                    |         192 ops/s |        1 ops/s | 🏆 PostgreSQL | 192.00x
1000         | 1_data                    |         296 ops/s |      223 ops/s | 🏆 PostgreSQL | 1.33x
1000         | 5_bulk                    |         909 ops/s |        3 ops/s | 🏆 PostgreSQL | 303.00x
1000         | 2_count                   |       18518 ops/s |      177 ops/s | 🏆 PostgreSQL | 104.62x
1000         | 5_bulk                    |         943 ops/s |        7 ops/s | 🏆 PostgreSQL | 134.71x
1000         | 3_crud                    |          18 ops/s |        1 ops/s | 🏆 PostgreSQL | 18.00x
10000        | 2_count                   |      185185 ops/s |     1631 ops/s | 🏆 PostgreSQL | 113.54x
10000        | 1_data                    |         293 ops/s |      221 ops/s | 🏆 PostgreSQL | 1.33x
10000        | 5_bulk                    |        1754 ops/s |        7 ops/s | 🏆 PostgreSQL | 250.57x
10000        | 3_crud                    |          18 ops/s |        1 ops/s | 🏆 PostgreSQL | 18.00x
10000        | 5_bulk                    |        1818 ops/s |       15 ops/s | 🏆 PostgreSQL | 121.20x
100000       | 5_bulk                    |        2857 ops/s |       28 ops/s | 🏆 PostgreSQL | 102.04x
100000       | 1_data                    |         293 ops/s |      223 ops/s | 🏆 PostgreSQL | 1.31x
100000       | 2_count                   |     1388888 ops/s |    11070 ops/s | 🏆 PostgreSQL | 125.46x
100000       | 3_crud                    |          18 ops/s |        1 ops/s | 🏆 PostgreSQL | 18.00x
100000       | 5_bulk                    |        2631 ops/s |       14 ops/s | 🏆 PostgreSQL | 187.93x
1000000      | 1_data                    |         292 ops/s |      220 ops/s | 🏆 PostgreSQL | 1.33x
1000000      | 3_crud                    |          18 ops/s |        1 ops/s | 🏆 PostgreSQL | 18.00x
1000000      | 5_bulk                    |        1538 ops/s |       31 ops/s | 🏆 PostgreSQL | 49.61x
1000000      | 5_bulk                    |        1689 ops/s |       65 ops/s | 🏆 PostgreSQL | 25.98x
10000000     | 5_bulk                    |         378 ops/s |       55 ops/s | 🏆 PostgreSQL | 6.87x
10000000     | 3_crud                    |           9 ops/s |        1 ops/s | 🏆 PostgreSQL | 9.00x
10000000     | 1_data                    |         293 ops/s |      222 ops/s | 🏆 PostgreSQL | 1.32x
10000000     | 5_bulk                    |         400 ops/s |       96 ops/s | 🏆 PostgreSQL | 4.17x

[0;35m📊 SCALABILITY ANALYSIS[0m
[0;35m────────────────────────────────────────────────────────────────────────────────[0m

[0;34m🎯 Operation: select_all[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────

[0;34m🎯 Operation: crud_delete[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────

[0;34m🎯 Operation: bulk_insert[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────

[0;34m🎯 Operation: scan_filtered_optimized[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────

[0;34m🎯 Operation: latency_single_get_optimized[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────

[0;34m🎯 Operation: count_filtered[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────
100          |          53 ms |     6000 ms |          0.01 | 📋 Baseline
1000         |          54 ms |     6207 ms |          0.01 | 📈 PostgreSQL scales better
10000        |          54 ms |     6802 ms |          0.01 | 📈 PostgreSQL scales better
100000       |          72 ms |    10036 ms |          0.01 | 📈 PostgreSQL scales better

[0;34m🎯 Operation: bulk_select_join[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────

[0;34m🎯 Operation: crud_put_batch[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────

[0;34m🎯 Operation: count_all[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────

[0;34m🎯 Operation: latency_scan_filter_optimized[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────

[0;34m🎯 Operation: latency_selective_get[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────

[0;34m🎯 Operation: bulk_scan[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────

[0;34m🎯 Operation: crud_get_optimized[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────

[0;34m🎯 Operation: crud_insert[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────

[0;34m🎯 Operation: latency_json_like_query[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────

[0;34m🎯 Operation: select_filtered[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────

[0;34m🎯 Operation: range_select[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────

[0;34m🎯 Operation: count_all_optimized[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────

[0;34m🎯 Operation: select_selective_by_id[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────

[0;34m🎯 Operation: batch_gets_optimized[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────

[0;34m🎯 Operation: latency_selective_select[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────

[0;34m🎯 Operation: latency_filtered_select[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────

[0;34m🎯 Operation: select_by_id[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────

[0;34m🎯 Operation: multiple_selects[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────

[0;34m🎯 Operation: bulk_update[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────
100          |          53 ms |    12217 ms |          0.00 | 📋 Baseline
1000         |          55 ms |    12588 ms |          0.00 | 📈 HBase scales better
10000        |          57 ms |    13129 ms |          0.00 | 📈 PostgreSQL scales better
100000       |          76 ms |    13872 ms |          0.01 | 📈 HBase scales better
1000000      |         325 ms |    16052 ms |          0.02 | 📈 HBase scales better
10000000     |        2642 ms |    17877 ms |          0.15 | 📈 HBase scales better

[0;34m🎯 Operation: crud_update_batch[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────

[0;34m🎯 Operation: latency_json_query[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────

[0;34m🎯 Operation: scan_selective_columns[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────

[0;34m🎯 Operation: get_selective_columns[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────

[0;34m🎯 Operation: crud_delete_optimized[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────

[0;34m🎯 Operation: scan_all_optimized[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────

[0;34m🎯 Operation: latency_batch_get_optimized[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────

[0;34m🎯 Operation: select_selective_columns[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────

[0;34m🎯 Operation: crud_update[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────

[0;34m🎯 Operation: crud_select_selective[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────

[0;34m🎯 Operation: latency_join_query[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────

[0;34m🎯 Operation: crud_get_selective[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────

[0;34m🎯 Operation: crud_select_join[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────

[0;34m🎯 Operation: bulk_put[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────

[0;34m🎯 Operation: get_by_id_optimized[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────

[0;34m🎯 Operation: bulk_delete[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────
100          |          52 ms |     6148 ms |          0.01 | 📋 Baseline
1000         |          53 ms |     6336 ms |          0.01 | 📈 PostgreSQL scales better
10000        |          55 ms |     6580 ms |          0.01 | 📈 PostgreSQL scales better
100000       |          70 ms |     6908 ms |          0.01 | 📈 HBase scales better
1000000      |         296 ms |     7612 ms |          0.04 | 📈 HBase scales better
10000000     |        2498 ms |    10378 ms |          0.24 | 📈 HBase scales better

[0;34m🎯 Operation: range_scan[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────

[0;34m🎯 Operation: latency_cf_get_optimized[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────

[0;34m🎯 Operation: latency_batch_select[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────

[0;34m🎯 Operation: data_generation_optimized[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────
100          |         344 ms |      449 ms |          0.77 | 📋 Baseline
1000         |        3369 ms |     4472 ms |          0.75 | 📈 PostgreSQL scales better
10000        |       34049 ms |    45107 ms |          0.75 | 📈 HBase scales better
100000       |      340202 ms |   447511 ms |          0.76 | 📈 HBase scales better
1000000      |     3421480 ms |  4544649 ms |          0.75 | 📈 PostgreSQL scales better
10000000     |    34073587 ms | 45019658 ms |          0.76 | 📈 HBase scales better

[0;34m🎯 Operation: crud_bulk_insert[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────
100          |         529 ms |     6414 ms |          0.08 | 📋 Baseline
1000         |         529 ms |     6449 ms |          0.08 | 📈 PostgreSQL scales better
10000        |         531 ms |     6382 ms |          0.08 | 📈 HBase scales better
100000       |         534 ms |     6407 ms |          0.08 | 📈 HBase scales better
1000000      |         553 ms |     6447 ms |          0.09 | 📈 HBase scales better
10000000     |        1080 ms |     6493 ms |          0.17 | 📈 HBase scales better

[0;34m🎯 Operation: latency_single_select[0m
Scale        | PostgreSQL      | HBase        | Perf. Ratio     | Scalability Trend
──────────── | ─────────────── | ──────────── | ─────────────── | ─────────────────

[1;37m🏆 OVERALL PERFORMANCE SUMMARY[0m
[1;37m══════════════════════════════════════════════════════════════════════════════[0m
📊 Total Performance Comparisons: 28
🏆 PostgreSQL Wins: 28 (100.0%)
🏆 HBase Wins: 0 (0.0%)
🤝 Tied Results: 0 (0.0%)

[0;32m🎉 ULTIMATE WINNER: PostgreSQL[0m
[0;32m   Victory margin: 28 operations[0m
[0;32m   Win rate advantage: 100.0%[0m

[0;36m💡 PERFORMANCE INSIGHTS & RECOMMENDATIONS[0m
[0;36m══════════════════════════════════════════════════════════════════════════════[0m
📊 Average PostgreSQL Response Time: 1352973.3 ms
📊 Average HBase Response Time: 1794970.7 ms
📊 Performance Difference: 441997.4 ms (28.1%)

[0;32m🎯 STRATEGIC RECOMMENDATIONS:[0m
✅ PostgreSQL shows superior average performance
💡 Consider PostgreSQL for: Complex queries, ACID transactions, structured data
📈 PostgreSQL advantage: 24.6% faster average response time

[0;35m📊 GENERATING ENHANCED ANALYSIS REPORTS[0m
══════════════════════════════════════════════════════════════════════════════
[0;34mℹ️  Creating detailed summary CSV...[0m
[0;32m✅ Detailed summary created: /home/hadoopuser/migration-production/benchmark-results/analysis/detailed_summary_20250729_165603.csv[0m
[0;34mℹ️  Creating performance comparison matrix...[0m
[0;32m✅ Performance matrix created: /home/hadoopuser/migration-production/benchmark-results/analysis/performance_matrix_20250729_165603.csv[0m
[0;34mℹ️  Creating scalability analysis report...[0m
[0;32m✅ Scalability report created: /home/hadoopuser/migration-production/benchmark-results/analysis/scalability_report_20250729_165603.csv[0m

[0;35m📊 FINAL ANALYSIS STATISTICS[0m
══════════════════════════════════════════════════════════════════════════════
📊 Total Operations: 294
🐘 PostgreSQL Operations: 156
🏗️  HBase Operations: 138
⚡ Fastest Operation: 52.0 ms
🐌 Slowest Operation: 45019658.0 ms
📈 Average Duration: 303701.9 ms
🚀 Average Throughput: 45889.8 ops/s
🏆 Peak Throughput: 6501950.0 ops/s
📁 Results File Size: 32K

[0;32m✅ All analysis reports generated in: /home/hadoopuser/migration-production/benchmark-results/analysis[0m
[0;34mℹ️  Files created:[0m
   📄 Detailed Summary: detailed_summary_20250729_165603.csv
   📊 Performance Matrix: performance_matrix_20250729_165603.csv
   📈 Scalability Report: scalability_report_20250729_165603.csv

[1;37m
╔══════════════════════════════════════════════════════════════════════════════╗
║                    ✨ ANALYSIS COMPLETED SUCCESSFULLY ✨                    ║
║                                                                              ║
║  🎯 Comprehensive performance comparison completed                           ║
║  📊 Multi-scale analysis with detailed insights                             ║
║  📈 Scalability trends and recommendations provided                         ║
║  💾 Enhanced reports saved for future reference                             ║
╚══════════════════════════════════════════════════════════════════════════════╝
[0m
[0;32m✅ Enhanced Scaled Benchmark Analysis Completed![0m
[0;34mℹ️  Analysis Duration: 0 seconds[0m
